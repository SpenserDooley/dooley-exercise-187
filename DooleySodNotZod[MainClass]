//AUTHOR: Spenser Dooley
//COURSE: CPT 187
//PURPOSE: MainClass orchestrates the whole user experience. It displays menus to guide the user through the program,
//collects input and validates it, and provides reports or error messages throughout.
//CREATED: 30 September 2020

package edu.cpt187.dooley.exercise6;

import java.util.Scanner;

public class MainClass 
{//START OF MainClass

	//CLASS CONSTANTS
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args) 
	{//START OF main

		//VARIABLES
		String userName = "";
		char menuSelection = ' ';

		//Creating Scanner object "input"
		Scanner input = new Scanner(System.in);

		//Instantiating objects
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);

		//WELCOME BANNER
		displayWelcomeBanner();

		//MAIN MENU PRIME READ
		menuSelection = validateMenuSelection(input);

		while(menuSelection != 'Q') 
		{//START OF run-while

			//Sets account arrays and gets username input to validate
			currentUser.setUserAccountArrays();
			userName = getUserName(input);

			if(menuSelection != 'A') 
			{//START OF if

				currentUser.setSearchedIndex(userName);

				if(currentUser.getSearchedIndex() >= 0) 
				{//START OF nested if (account validation)

					//User account was found
					displayAccountResults(userName);

				}//END OF nested if (account validation)

				else 
				{//START OF nested else (account validation)

					//Uses the username entered and gets a password to write a record
					//in the currentUser object, displays account results
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();

				}//END OF nested else (account validation)

			}//END OF if

			else 
			{//START OF else

				currentUser.setSearchedIndex(userName, getPassword(input));

				if(currentUser.getSearchedIndex() < 0) 
				{//START OF nested if (login attempt)

					displayLoginError();

				}//END OF nested if (login attempt)

				else 
				{//START OF nested else (login attempt successful)

					//FILE MENU PRIME READ
					menuSelection = validateFileSelection(input);

					while(menuSelection != 'R') 
					{//START OF nested run-while (file menu)

						if(menuSelection == 'A') 
						{//START OF nested if (file menu)

							currentInventory.setLoadItems(getFileName(input));

							if(currentInventory.getRecordCount() <= 0) 
							{//START OF nested if (file validation)

								displayFileError();

							}//END OF nested if (file validation)

							else 
							{//START OF nested else (file validation)

								displayRecordReport(currentInventory.getRecordCount());

							}//END OF nested else (file validation)

						}//END OF nested if (file menu)

						else 
						{//START OF else (file menu)

							currentInventory.setSearchIndex(validateSearchValue(input));

							if(currentInventory.getItemSearchIndex() < 0) 
							{//START OF nested if (search value validation)

								displayNotFound();

							}//END OF nested if (search value validation)

							else 
							{//START OF nested else (search value validation)

								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));

								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany()) 
								{//START OF nested if (stock validation)

									displayOutOfStock();

								}//END OF nested if (stock validation)

								else 
								{//START OF nested else (stock validation)

									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), 
											currentOrder.getHowMany(), currentOrder.getTotalCost());

									if(currentOrder.getDiscountRate() > 0.0) 
									{//START OF nested if (order report)

										//Displays order report when a discount was applied
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), 
												currentOrder.getHowMany(), currentOrder.getDiscountName(),
												currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), 
												currentOrder.getDiscountPrice(), currentOrder.getSubTotal(),
												currentOrder.getTaxRate(), currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//END OF nested if (order report)

									else 
									{//START OF nested else (order report)

										//Displays order report when no discount was applied
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), 
												currentOrder.getHowMany(), currentOrder.getSubTotal(),
												currentOrder.getTaxRate(), currentOrder.getTaxAmt(), 
												currentOrder.getTotalCost(), currentOrder.getPrizeName(), 
												currentOrder.getInStockCount(currentInventory.getInStockCounts()));

									}//END OF nested else (order report)

								}//END OF nested else (stock validation)

							}//END OF nested else (search value validation)

						}//END OF else (file menu)

						//FILE MENU UPDATE READ
						menuSelection = validateFileSelection(input);

					}//END OF nested run-while (file menu)

				}//END OF nested else (login attempt successful)

			}//END OF else

			//MAIN MENU UPDATE READ
			menuSelection = validateMenuSelection(input);

		}//END OF run-while

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());

		if(orders.getRecordCount() > 0) 
		{//START OF if 

			//Displays the final report if there were records written to "orders"
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(),
					currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());

		}//END OF if

		//Farewell message
		displayFarewellMessage();

		input.close();

	}//END OF main

	//VOID METHODS

	public static void displayWelcomeBanner() 
	{//START OF displayWelcomeBanner

		System.out.println("Welcome to the ~Totally Real Store~ Program!");
		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("\nThis program will search and access validated files");
		System.out.println("and the records within them for you to create orders!");
		System.out.println("If you don't have one already, you can create a user");
		System.out.println("name with a secure password during the process, and");
		System.out.println("we'll remember for the next time you shop with us!");
		System.out.println("\nPlease continue below!");

	}//END OF displayWelcomeBanner

	public static void displayMainMenu() 
	{//START OF displayMainMenu

		int localIndex = 0;

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("MAIN MENU");

		//Main menu print loop
		while(localIndex < MENU_OPTIONS.length) 
		{//START OF while
			System.out.printf("%-2s%-4s%-30s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END OF while

		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayMainMenu

	public static void displayFileMenu() 
	{//START OF displayFileMenu

		int localIndex = 0;

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("FILE MENU");

		//Main menu print loop
		while(localIndex < FILE_MENU_OPTIONS.length) 
		{//START OF while
			System.out.printf("%-2s%-4s%-30s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}//END OF while

		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayFileMenu

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates) 
	{//START OF displayDiscountMenu

		int localIndex = 0;

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("DISCOUNT MENU");

		//Main menu print loop
		while(localIndex < borrowedDiscountNames.length) 
		{//START OF while
			System.out.printf("%-2s%-4s%-30s%-5.1f%2s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex] * 100, "%");
			localIndex++;
		}//END OF while

		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayDiscountMenu

	public static void displayAccountResults() 
	{//START OF displayAccountResults (new account)

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayAccountResults (new account)

	public static void displayAccountResults(String userName) 
	{//START OF displayAccountResults (account found)

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + userName + ", already exists");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayAccountResults (account found)

	public static void displayFileError() 
	{//START OF displayFileError

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayFileError

	public static void displayLoginError() 
	{//START OF displayLoginError

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayLoginError

	public static void displayNotFound() 
	{//START OF displayNotFound

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayNotFound

	public static void displayOutOfStock() 
	{//START OF displayOutOfStock

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayOutOfStock

	public static void displayRecordReport(int borrowedRecordCount) 
	{//START OF displayRecordReport

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-4d%-30s\n", borrowedRecordCount, "records processed");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayRecordReport

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal,
			double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount) 
	{//START OF displayOrderReport (no discount)

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.printf("%-20s%-30s\n", "Customer Name:", userName);
		System.out.println("");
		System.out.printf("%-20s%-30s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-20s%-2s%8.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-20s%10d\n", "Quantity:", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-20s%-2s%8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-20s%9.1f%2s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-20s%-2s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-20s%-30s\n", "Prize Name:", borrowedPrizeName);
		System.out.println("");
		System.out.printf("%-20s%2d%15s%-4s%15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "(s)", "left in-stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayOrderReport (no discount)

	public static void displayOrderReport(String userName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName,
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, 
			double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount) 
	{//START OF displayOrderReport (discount applied)

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.printf("%-20s%-30s\n", "Customer Name:", userName);
		System.out.println("");
		System.out.printf("%-20s%-30s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-20s%-2s%8.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-20s%-30s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-20s%9.1f%2s\n", "Discount Rate:", borrowedDiscountRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-20s%-2s%8.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-20s%10d\n", "Quantity:", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-20s%-2s%8.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-20s%9.1f%2s\n", "Tax Rate:", borrowedTaxRate * 100, "%");
		System.out.printf("%-20s%-2s%8.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-20s%-2s%8.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-20s%-30s\n", "Prize Name:", borrowedPrizeName);
		System.out.println("");
		System.out.printf("%-20s%2d%15s%-4s%15s\n", "Buy more now: Only", borrowedInStockCount, borrowedItemName, "(s)", "left in-stock!");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayOrderReport (discount applied)

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities,
			double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal) 
	{//START OF displayFinalReport

		int localIndex = 0;

		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~"); 
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.printf("%-4s%-25s%-7s%-4s%-16s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");

		while(localIndex <= borrowedRecordCount) 
		{//START OF while
			System.out.printf("%-4d%-25s%-2s%3.2f%4d%2s%6.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex],
					borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}//END OF while

		System.out.println("\nGRAND TOTAL");
		System.out.printf("%-2s%8.2f\n", "$", borrowedGrandTotal);

		System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");

	}//END OF displayFinalReport

	public static void displayFarewellMessage() 
	{//START OF displayFarewellMessage

		System.out.println("\nThanks for using the ~Totally Real Store~ Program!");
		System.out.println("Have a great day!");

	}//END OF displayFarewellMessage

	//END OF VOIDS

	//VR METHODS

	public static char validateMenuSelection(Scanner borrowedInput) 
	{//START OF validateMenuSelection

		char localSelection = ' ';
		displayMainMenu();
		System.out.print("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'Q') 
		{//START OF while
			//ERROR MESSAGE
			System.out.println("\n***INVALID ENTRY***");
			System.out.println("Please choose from the menu options below.");

			//INPUT REQUEST
			displayMainMenu();
			System.out.print("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while

		return localSelection;

	}//END OF validateMenuSelection

	public static String getUserName(Scanner borrowedInput) 
	{//START OF getUserName

		String localUserName = "";
		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName;

	}//END OF getUserName

	public static String getPassword(Scanner borrowedInput) 
	{//START OF getPassword

		String localPassword = "";
		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword;

	}//END OF getPassword

	public static int validateSearchValue(Scanner borrowedInput) 
	{//START OF validateSearchValue

		int localSearchValue = 0;
		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();

		while(localSearchValue < 0) 
		{//START OF while
			//ERROR MESSAGE
			System.out.println("\n***INVALID ENTRY***");
			System.out.println("Please enter a valid value.");

			//INPUT REQUEST
			System.out.print("\nEnter the search value: ");
			localSearchValue = borrowedInput.nextInt();
		}//END OF while

		return localSearchValue;

	}//END OF validateSearchValue

	public static String getFileName(Scanner borrowedInput) 
	{//START OF getFileName

		String localFileName = "";
		System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~~");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName;

	}//END OF getFileName

	public static String validateHowMany(Scanner borrowedInput) 
	{//START OF validateHowMany

		String localHowMany = "";
		System.out.print("\nEnter the amount you are ordering: ");
		localHowMany = borrowedInput.next();

		while(Integer.parseInt(localHowMany) <= 0) 
		{//START OF while
			//ERROR MESSAGE
			System.out.println("\n***INVALID ENTRY***");
			System.out.println("Please enter a valid quantity.");

			//INPUT REQUEST
			System.out.print("\nEnter the amount you are ordering: ");
			localHowMany = borrowedInput.next();
		}//END OF while

		return localHowMany;

	}//END OF validateHowMany

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{//START OF validateDiscountMenu

		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		System.out.print("Please make your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C') 
		{//START OF while
			//ERROR MESSAGE
			System.out.println("\n***INVALID ENTRY***");
			System.out.println("Please choose from the menu options below.");

			//INPUT REQUEST
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			System.out.print("Please make your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while

		return localSelection;

	}//END OF validateDiscountMenu

	public static char validateFileSelection(Scanner borrowedInput) 
	{//START OF validateFileSelection

		char localSelection = ' ';
		displayFileMenu();
		System.out.print("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'R') 
		{//START OF while
			//ERROR MESSAGE
			System.out.println("\n***INVALID ENTRY***");
			System.out.println("Please choose from the menu options below.");

			//INPUT REQUEST
			displayFileMenu();
			System.out.print("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}//END OF while

		return localSelection;

	}//END OF validateFileSelection

	//END OF VRS

}//END OF MainClass
