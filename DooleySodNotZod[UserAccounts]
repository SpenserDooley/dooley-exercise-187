//AUTHOR: Spenser Dooley
//COURSE: CPT 187
//PURPOSE: UserAccounts will store user account data (usernames and passwords) by collecting user input,
//and sorting them in a master file.
//CREATED: 30 September 2020

package edu.cpt187.dooley.exercise6;

import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileInputStream;
import java.util.Scanner;

public class UserAccounts 
{//START OF CLASS UserAccounts

	//CLASS CONSTANTS
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;

	//OTHER ATTRIBUTES
	private String[] userNames = new String[MAXIMUM_RECORDS];
	private String[] passwords = new String[MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;

	//UserAccount Constructor
	public UserAccounts(String borrowedFileName) 
	{//START OF CONSTRUCTOR
		masterFileName = borrowedFileName;
	}//END OF CONSTRUCTOR

	//SETTER METHODS

	public void setUserAccountArrays() 
	{//START OF setUserAccountArrays

		try 
		{//START OF try

			Scanner infile = new Scanner(new FileInputStream(getFileName()));

			recordCount = RESET_VALUE;

			while(infile.hasNext() == true && recordCount < MAXIMUM_RECORDS) 
			{//START OF while

				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();
				recordCount++;

			}//END OF while

			infile.close();

		}//END OF try

		catch(IOException ex) 
		{//START OF catch
			recordCount = NOT_FOUND;
		}//END OF catch

	}//END OF setUserAccountArrays

	public void setSearchedIndex(String borrowedUserName) 
	{//START OF setSearchedIndex 
		searchedIndex = getSeqSearch(borrowedUserName);
	}//END OF setSearchedIndex

	public void setSearchedIndex(String borrowedUserName, String borrowedPassword) 
	{//START OF setSearchedIndex (overloaded)

		searchedIndex = getSeqSearch(borrowedUserName);

		if(searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false) 
		{//START OF if
			searchedIndex = NOT_FOUND;
		}//END OF if

	}//END OF setSearchedIndex (overloaded

	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword) 
	{//START OF setWriteOneRecord

		try 
		{//START OF try

			PrintWriter filePW = new PrintWriter(new FileWriter(masterFileName, false));
			
			filePW.printf("%n%s\t%s", borrowedUserName, borrowedPassword);
			
			filePW.close();
			
		}//END OF try

		catch(IOException ex) 
		{//START OF catch
			searchedIndex = NOT_FOUND;
		}//END OF catch

	}//END OF setWriteOneRecord

	//END OF SETTERS

	//GETTER METHODS

	public int getSeqSearch(String borrowedBorrowedUserName) 
	{//START OF getSeqSearch

		int localIndex = RESET_VALUE;
		int localFound = NOT_FOUND;

		while(localIndex < recordCount) 
		{//START OF while

			if(borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex])) 
			{//START OF if
				localFound = localIndex;
				localIndex = recordCount;
			}//END OF if

			else 
			{//START OF else
				localIndex++;
			}//END OF else

		}//END OF while

		return localFound;

	}//END OF getSeqSearch

	public boolean getPasswordMatch(String borrowedBorrowedPassword) 
	{//START OF getPasswordMatch

		boolean localMatch = false;

		if(borrowedBorrowedPassword.equals(passwords[searchedIndex])) 
		{//START OF if
			localMatch = true;
		}//END OF if

		return localMatch;

	}//END OF getPasswordMatch

	public String getFileName() 
	{//START OF getFileName
		return masterFileName;
	}//END OF getFileName

	public int getMaximumRecords() 
	{//START OF getMaximumRecords
		return MAXIMUM_RECORDS;
	}//END OF getMaximumRecords

	public int getRecordCount() 
	{//START OF getRecordCount
		return recordCount;
	}//END OF getRecordCount

	public int getSearchedIndex() 
	{//START OF getSearchedIndex
		return searchedIndex;
	}//END OF getSearchedIndex

	//END OF GETTERS

}//END OF CLASS UserAccounts
